// Code generated by goqface. DO NOT EDIT.
package {{module.module.name_parts[-1]|lower}}

import (
{% for interface in module.interfaces: %}
{% if interface.properties %}
    "reflect"
{% endif %}
{% endfor %}
	"github.com/godbus/dbus/v5"
{% for key, value in module.interface_imports.items() %}
{{key}} "{{value}}"
{% endfor %}
)

{% for interface in module.interfaces: %}

type {{interface.proxy_name}} struct {
    SignalWatcher interface{}
	{% for property in interface.properties %}
	{{property.lower_name}} {{property.go_type}}
	{% endfor %}
	ready          bool
	Conn           *dbus.Conn
	ServiceName    string
	InterfaceName  string
	ObjectPath     dbus.ObjectPath
	RemoteObj      dbus.BusObject

}

type {{interface.name}}SignalWatcher interface {
    {% for signal in interface.signals %}
	On{{signal.cap_name}}({%- for parameter in signal.parameters -%} {{parameter.name}} {{parameter.go_type}},{%- endfor -%})
    {% endfor %}
    {% for property in interface.properties %}
    {{property.cap_name}}Changed({{property.name}} {{property.go_type}})
    {% endfor %}
}

func (c *{{interface.proxy_name}}) Init() {
    c.InterfaceName = "{{interface.qualified_name}}"
    c.ObjectPath = "/{{interface.qualified_name.replace('.', '/')}}"
}

func (c *{{interface.proxy_name}}) watchSignals() {
    ch := make(chan *dbus.Signal)
	c.Conn.Signal(ch)
	for v := range ch {
	    if (v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged") {
	        var inter string
	        var changedProps map[string]dbus.Variant
	        var invalidatedProps []string
			err := dbus.Store(v.Body, &inter, &changedProps, &invalidatedProps)
			if err == nil && inter == "{{interface.qualified_name}}" {
                c.setProps(changedProps)
            }
	    }
	    {% for signal in interface.signals %}
	    if (v.Name == "{{interface.qualified_name}}.{{signal.name}}") {
            s, ok := c.SignalWatcher.(interface{ On{{signal.cap_name}}({%- for parameter in signal.parameters -%} {{parameter.go_type}},{%- endfor -%}) })
            if ok {
                {% for param in signal.parameters %}
                var arg{{loop.index}} {{param.go_type}}
                {% endfor %}
                err := dbus.Store(v.Body, {%- for parameter in signal.parameters -%} &arg{{loop.index}},{%- endfor -%})
                if err == nil {
                    s.On{{signal.cap_name}}({%- for parameter in signal.parameters -%} arg{{loop.index}},{%- endfor -%})
                }
            }
	    }
        {% endfor %}
	}
}

func (c *{{interface.proxy_name}}) ConnectToServer(serviceName string) {
    c.ServiceName = serviceName
    c.RemoteObj = c.Conn.Object(c.ServiceName, c.ObjectPath)
    values := c.RemoteObj.Call("org.freedesktop.DBus.Properties.GetAll", 0, c.InterfaceName)
	if len(values.Body) > 0 {
		props := values.Body[0].(map[string]dbus.Variant)
        c.setProps(props)
	}

   	c.RemoteObj.AddMatchSignal("org.freedesktop.DBus.Properties", "PropertiesChanged")
{% for signal in interface.signals %}
	c.RemoteObj.AddMatchSignal(c.InterfaceName, "{{signal.name}}")
{% endfor %}
    go c.watchSignals()
}

func (c *{{interface.proxy_name}}) setProps(props map[string]dbus.Variant) {
    {% for property in interface.properties %}
    if val, ok := props["{{property.name}}"]; ok {
        var t {{property.go_type}}
        err := dbus.Store([]interface{}{val}, &t)
        if err == nil && !reflect.DeepEqual(c.{{property.lower_name}}, t) {
            c.{{property.lower_name}} = t
            i, ok := c.SignalWatcher.(interface{ {{property.cap_name}}Changed({{property.go_type}}) })
            if ok {
                i.{{property.cap_name}}Changed(c.{{property.lower_name}})
            }
        }
    }
    {% endfor %}
    if val, ok := props["ready"]; ok {
        dbus.Store([]interface{}{val}, &c.ready)
        i, ok := c.SignalWatcher.(interface{ ReadyChanged(bool) })
        if ok {
            i.ReadyChanged(c.ready)
        }
    }
}

{% for property in interface.properties %}
func (c *{{interface.proxy_name}}) {{property.cap_name}}() {{property.go_type}} {
    return  c.{{property.lower_name}}
}
{% if not property.readonly %}
func (c *{{interface.proxy_name}}) Set{{property.name}}(value {{property.go_type}}) error {
    return c.RemoteObj.SetProperty("{{interface.qualified_name}}.{{property.name}}", dbus.MakeVariant(value))
}
{% endif %}
{% endfor %}

{% for operation in interface.operations %}
func (c *{{interface.proxy_name}}) {{operation.cap_name}}({%- for parameter in operation.parameters -%}{{parameter.name}} {{parameter.go_type}},{%- endfor -%}) ({% if operation.has_return_value %}r {{operation.go_type}}, {% endif %}err error){
    err=c.RemoteObj.Call("{{operation.name}}", 0, {%- for parameter in operation.parameters -%}{{parameter.name}},{%- endfor -%}){% if operation.has_return_value %}.Store(&r){% else %}.Err{% endif %}

    return {% if operation.has_return_value %}r, {% endif %}err
}
{% endfor %}

{% endfor %}
